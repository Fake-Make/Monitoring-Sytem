const fs = require('fs')
const SerialPort = require('serialport')
const ITMP = require('./ITMP.js')
const ITMPSerialLink = require('./seriallink')
const ITMPWsLink = require('./wslink.js')
const ITMPWsServer = require('./ITMPWsServer.js')
// const itmpnode = require("./itmpnode.js")
// const mot823 = require('./mot823.js');
// const HTMeter = require("./HTMeter.js");

const SHEAD = require('./stepmod.js')
const os = require('os')

const express = require('express')

const app = express()
const expressWs = require('express-ws')(app)
const bodyParser = require('body-parser')

const Area = require('./area')

const Tsdb = require('./tsdb')
const Log = require('./log')

const connectors = {}

app.use('/', express.static('public'))
app.ws('/ws', (ws, req) => {
  if (req.connection.remoteFamily === 'IPv6') {
    itmp.addLink(
      new ITMPWsServer(
        itmp,
        `ws:[${req.connection.remoteAddress}]:${req.connection.remotePort}`,
        ws
      )
    )
  } else {
    itmp.addLink(
      new ITMPWsServer(itmp, `ws:${req.connection.remoteAddress}:${req.connection.remotePort}`, ws)
    )
  }
  console.log(`connected ws:${req.ip}`)
})

var server = app.listen(3000, () => {
  console.log(
    `App listening on address '${server.address().address}' and port ${server.address().port}`
  )
})

/* app.get('/index.htm', function (req, res) {
  res.sendFile( __dirname + "/" + "index.htm" );
}) */

app.get('/process_get', (req, res) => {
  // Prepare output in JSON format
  let response = {
    first_name: req.query.first_name,
    last_name: req.query.last_name
  }
  console.log(response)
  res.end(JSON.stringify(response))
})

// Create application/x-www-form-urlencoded parser
const urlencodedParser = bodyParser.urlencoded({ extended: false })

app.post('/process_post', urlencodedParser, (req, res) => {
  // Prepare output in JSON format
  let response = {
    first_name: req.body.first_name,
    last_name: req.body.last_name
  }
  console.log(response)
  res.end(JSON.stringify(response))
})

SerialPort.list((err, ports) => {
  if (err) { return }
  ports.forEach((port) => {
    console.log(port.comName + JSON.stringify(port))
    // console.log(port.manufacturer);
  })
})

function sleep (ms) {
  return new Promise((resolve) => setTimeout(resolve, ms))
}

const itmp = new ITMP()

itmp.addCall('links', (args) => {
  const ret = []
  for (const lnk of itmp.links.keys()) {
    ret.push(lnk)
  }
  return ret
})

connectors['itmp'] = itmp

let lastCPU

itmp.addSubscribe('stat', (args, opts, s) => {
  const inter = setInterval(
    () => {
      // const cp = os.cpus()
      lastCPU = process.cpuUsage(lastCPU)
      itmp.emitEvent('stat', {
        H: areas['office'].get('H'),
        T: areas['office'].get('T')
        //        mem: ht.T
        //        freemem: os.freemem(),
        //        up: os.uptime(),
        //        usage: lastCPU
      })
    },
    1000,
    args
  )
  s.timer = inter
})

itmp.addLink(new ITMPSerialLink(itmp, 'com', 'COM7'))
// itmp.addLink(new ITMPWsLink(itmp, 'ws', 'ws://localhost:8080/mws?login=admin&password=admin'));
// itmp.addLink(new ITMPWsLink(itmp, 'wsloop', 'ws://localhost:3000/ws?login=admin&password=admin'));

// const ht = new HTMeter(itmp, 'com/6'); //mot823

let log = new Log('log')
let tsdb = new Tsdb('itmp')
let areas = {}

areas['office'] = new Area('office', connectors, tsdb)
// let h = new Area("office",itmp,tsdb);
log.write(2, 'start')

app.get('/area/:area_id', (req, res) => {
  // Prepare output in JSON format
  let response = {
    area: req.params.area_id,
    vars: areas[req.params.area_id].vars,
    vals: areas[req.params.area_id].triggers,
    devs: Object.keys(areas[req.params.area_id].devs)
  }
  console.log(response)
  res.end(JSON.stringify(response))
})

app.get('/area', (req, res) => {
  // Prepare output in JSON format
  let response = {
    areas: Object.keys(areas)
  }
  console.log(response)
  res.end(JSON.stringify(response))
})

app.get('/update', (req, res) => {
  if (req.query.token === 'qwertyuioplkjhgf') {
    let ret = areas['office'].update(req.query.id, req.query.value)
    console.log(ret)
    res.end(JSON.stringify(ret))
  } else {
    res.end(JSON.stringify({error: 'wrong token'}))
  }
})

areas['office'].deserializecfg('cfg.json')
// h.addNode("HT", "HTMeter", 'com/6', 2000);
// h.addNode("mot", "mot823", 'com/1');
// h.setHistory('HT_H', "HT/H", true);
// h.setHistory('HT_T', "HT/T", true);

// h.on(['HT_H', 'HT_T'], () => { if (HT_T < 0) alert = true; console.log("знач ", HT_H, HT_T); });
// h.on('HT_T', () => { if (HT_T < 26) HT.setservo(0,0); else HT.setservo(10,10); });

areas['office'].serializecfg('cfg.json')

async function demo () {
  //    m.describe('to',(descr)=>{ console.log("to done: ",descr); }, (err)=>{console.log("to error: ",err); } );
  // await sleep(500);
  //    m.describe('go',(descr)=>{ console.log("go done: ",descr); }, (err)=>{console.log("go error: ",err); } );

  //    itmp.describe("ws","go",(descr)=>{ console.log("ws done: ",descr); }, (err)=>{console.log("ws error: ",err); } );

  // itmp.subscribe("ws","item", {"id":1,"slot":""}, (name,data)=>{ console.log("ws event: ",name,JSON.stringify(data)); }, (err)=>{console.log("ws event error: ",err); } );

  // itmp.subscribe("ws","items/*", {}, (name,data)=>{ console.log("ws1 event: ",name,JSON.stringify(data)); }, (err)=>{console.log("ws1 event error: ",err); } );
  // itmp.subscribe("ws","items/2/time", {limit:10}, (name,data)=>{ console.log("ws2 event: ",name,JSON.stringify(data)); }, (err)=>{console.log("ws2 event error: ",err); } );

  itmp.on('event', (addr, url, data, opt) => {
    console.log('event: ', addr, url, JSON.stringify(data), typeof opt === 'undefined' ? '' : opt)
  })
  // await sleep(1500);

  // itmp.unsubscribe("ws","items/2/time", {}, (data)=>{ console.log("ws2 unsevent: ", JSON.stringify(data)); }, (err)=>{console.log("ws2 unsevent error: ",err); } );

  // const inter = setInterval(poll, 2000, ht);
}

demo()
